<!doctype html>
<html lang="en">
<head>
    <title>Introduction to WebRTC</title>

    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
<video id="myVideoTag" muted autoplay></video>
<video id="theirVideoTag" autoplay></video>
<div>
    <label>ROOM-ID</label><input id="roomID" type="text"/>
    <input id="joinRoom" type="submit"/>

    <div id="signalingArea">Signaling Messages:<br></div>
</div>

<script>
    var myVideoArea = document.querySelector("#myVideoTag");
    var theirVideoArea = document.querySelector("#theirVideoTag");
    var roomID = document.querySelector('#roomID');
    var joinRoom = document.querySelector('#joinRoom');

    var myRoom;

    var configuration = {
        'iceServers': [{
            'url': 'stun:stun.l.google.com:19302'
        }]
    };

    var rtcPeerConn;

    io = io.connect();
    joinRoom.addEventListener('click', function () {
        if(roomID.value && roomID.value !== myRoom) {
            rtcPeerConn = null;
            myVideoArea.srcObject = null;
            theirVideoArea.srcObject = null;
            myRoom = roomID.value;
            io.emit('ready', roomID.value);
            io.emit('signal', {"type": "user_here", "message": "Are you ready for a call?", "room": roomID.value});
        } else {
            alert("Enter room ID");
        }
    })



    //Send a first signaling message to anyone listening
    //This normally would be on a button click


    io.on('signaling_message', function (data) {
        displaySignalMessage("Signal received: " + data.type);

        //Setup the RTC Peer Connection object
        if (!rtcPeerConn)
            startSignaling();

        if (data.type != "user_here") {
            var message = JSON.parse(data.message);
            if (message.sdp) {
                rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                    // if we received an offer, we need to answer
                    if (rtcPeerConn.remoteDescription.type == 'offer') {
                        rtcPeerConn.createAnswer(sendLocalDesc, logError);
                    }
                }, logError);
            } else {
                rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate));
            }
        }

    });

    function startSignaling() {
        displaySignalMessage("starting signaling...");

        rtcPeerConn = new RTCPeerConnection(configuration);

        // send any ice candidates to the other peer
        rtcPeerConn.onicecandidate = function (evt) {
            if (evt.candidate)
                io.emit('signal', {
                    "type": "ice candidate",
                    "message": JSON.stringify({'candidate': evt.candidate}),
                    "room": myRoom
                });
            displaySignalMessage("completed that ice candidate...");
        };

        // let the 'negotiationneeded' event trigger offer generation
        rtcPeerConn.onnegotiationneeded = function () {
            displaySignalMessage("on negotiation called");
            rtcPeerConn.createOffer(sendLocalDesc, logError);
        }

        // once remote stream arrives, show it in the remote video element
        rtcPeerConn.ontrack = function (evt) {
            displaySignalMessage("going to add their stream...");
            window.theirstream = evt;
            theirVideoArea.srcObject = evt.streams[0];
        };

        // get a local stream, show it in our video tag and add it to be sent
        navigator.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia;
        navigator.getUserMedia({
            'audio': {echoCancellation: true},
            'video': true
        }, function (stream) {
            displaySignalMessage("going to display my stream...");
            window.mystream = stream;
            myVideoArea.srcObject = stream;
            stream.getTracks().forEach(track => {
                rtcPeerConn.addTrack(track, stream)
            })
        }, logError);

    }

    function sendLocalDesc(desc) {
        rtcPeerConn.setLocalDescription(desc, function () {
            displaySignalMessage("sending local description");
            io.emit('signal', {
                "type": "SDP",
                "message": JSON.stringify({'sdp': rtcPeerConn.localDescription}),
                "room": myRoom
            });
        }, logError);
    }

    function logError(error) {
        displaySignalMessage(error.name + ': ' + error.message);
    }

    io.on('announce', function (data) {
        displayMessage(data.message);
    });

    io.on('message', function (data) {
        displayMessage(data.author + ": " + data.message);
    });

    function displayMessage(message) {
        chatArea.innerHTML = chatArea.innerHTML + "<br/>" + message;
        console.log("->" + message);
    }

    function displaySignalMessage(message) {
        signalingArea.innerHTML = signalingArea.innerHTML + "<br/>" + message;
        console.log("=>" + message);
    }

    // sendMessage.addEventListener('click', function (ev) {
    //     io.emit('send', {"author": myName.value, "message": myMessage.value, "room": ROOM});
    //     ev.preventDefault();
    // }, false);


</script>
</body>
</html>